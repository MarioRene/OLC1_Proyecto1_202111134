package analizadores;

import java_cup.runtime.*;
import modelos.*;
import java.util.*;

parser code {:
    public static Map<String, Object> automatas = new HashMap<>();
    public static List<String> errores = new ArrayList<>();
    
    private void mostrarError(String mensaje, int linea, int columna) {
        String error = "Error sintáctico: " + mensaje;
        if (linea >= 0 && columna >= 0) {
            error += " en línea " + (linea + 1) + ", columna " + (columna + 1);
        }
        errores.add(error);
        System.err.println(error);
    }
    
    public void syntax_error(Symbol s) {
        String tokenName = "desconocido";
        if (s.value != null) {
            tokenName = s.value.toString();
        }
        mostrarError("Token inesperado '" + tokenName + "'", s.left, s.right);
    }
    
    public void unrecovered_syntax_error(Symbol s) throws Exception {
        mostrarError("Error de sintaxis irrecuperable", s.left, s.right);
        throw new Exception("Error de sintaxis irrecuperable");
    }
:};

// Terminales
terminal String CADENA, IDENTIFICADOR;
terminal Character CARACTER;
terminal 
    AFD_INI, AFD_FIN, AP_INI, AP_FIN, 
    NOMBRE, N, T, P, I, A, TRANSICIONES,
    VER_AUTOMATAS, DESC,
    IGUAL, LLAVE_IZQ, LLAVE_DER, PAREN_IZQ, PAREN_DER,
    FLECHA, OR, PUNTO_COMA, DOS_PUNTOS, COMA, DOLAR;

// No terminales
non terminal programa;
non terminal elementos;
non terminal elemento;
non terminal AFD definicion_afd;
non terminal AP definicion_ap;
non terminal llamada_funcion;
non terminal List<String> lista_estados;
non terminal List<Character> lista_simbolos;
non terminal Character simbolo;
non terminal List<Transicion> transiciones_afd;
non terminal List<Transicion> transiciones_ap;
non terminal List<Transicion> grupo_trans_afd;
non terminal List<Transicion> grupo_trans_ap;
non terminal Transicion trans_afd_simple;
non terminal Transicion trans_ap_simple;

// Precedencias
precedence left OR;
precedence left FLECHA;
precedence left COMA;

start with programa;

// Reglas gramaticales
programa ::= elementos
           | /* programa vacío */
           ;

elementos ::= elementos elemento
            | elemento
            ;

elemento ::= definicion_afd
           | definicion_ap
           | llamada_funcion
           | error PUNTO_COMA {: parser.mostrarError("Error de sintaxis en elemento", -1, -1); :}
           ;

// Definición de AFD
definicion_afd ::= AFD_INI NOMBRE IGUAL CADENA:nombre LLAVE_DER 
                   N IGUAL LLAVE_IZQ lista_estados:estados LLAVE_DER PUNTO_COMA
                   T IGUAL LLAVE_IZQ lista_simbolos:alfabeto LLAVE_DER PUNTO_COMA
                   I IGUAL LLAVE_IZQ lista_estados:inicial LLAVE_DER PUNTO_COMA
                   A IGUAL LLAVE_IZQ lista_estados:aceptacion LLAVE_DER PUNTO_COMA
                   TRANSICIONES DOS_PUNTOS transiciones_afd:trans 
                   AFD_FIN 
                 {: 
                   try {
                       String estadoInicial = inicial.isEmpty() ? "" : inicial.get(0);
                       AFD nuevoAFD = new AFD(nombre, estados, alfabeto, estadoInicial, aceptacion, trans);
                       parser.automatas.put(nombre, nuevoAFD);
                       RESULT = nuevoAFD;
                       System.out.println("AFD '" + nombre + "' definido correctamente");
                   } catch (Exception e) {
                       parser.mostrarError("Error en AFD '" + nombre + "': " + e.getMessage(), -1, -1);
                       RESULT = null;
                   }
                 :} ;

// Definición de AP
definicion_ap ::= AP_INI NOMBRE IGUAL CADENA:nombre LLAVE_DER 
                  N IGUAL LLAVE_IZQ lista_estados:estados LLAVE_DER PUNTO_COMA
                  T IGUAL LLAVE_IZQ lista_simbolos:alfabeto LLAVE_DER PUNTO_COMA
                  P IGUAL LLAVE_IZQ lista_simbolos:pila LLAVE_DER PUNTO_COMA
                  I IGUAL LLAVE_IZQ lista_estados:inicial LLAVE_DER PUNTO_COMA
                  A IGUAL LLAVE_IZQ lista_estados:aceptacion LLAVE_DER PUNTO_COMA
                  TRANSICIONES DOS_PUNTOS transiciones_ap:trans 
                  AP_FIN 
                {: 
                  try {
                      String estadoInicial = inicial.isEmpty() ? "" : inicial.get(0);
                      AP nuevoAP = new AP(nombre, estados, alfabeto, pila, estadoInicial, aceptacion, trans);
                      parser.automatas.put(nombre, nuevoAP);
                      RESULT = nuevoAP;
                      System.out.println("AP '" + nombre + "' definido correctamente");
                  } catch (Exception e) {
                      parser.mostrarError("Error en AP '" + nombre + "': " + e.getMessage(), -1, -1);
                      RESULT = null;
                  }
                :} ;

// Listas básicas
lista_estados ::= IDENTIFICADOR:e 
                {: 
                    List<String> lista = new ArrayList<>(); 
                    lista.add(e); 
                    RESULT = lista;
                :}
                | lista_estados:lista COMA IDENTIFICADOR:e 
                {: 
                    lista.add(e); 
                    RESULT = lista;
                :} ;

lista_simbolos ::= simbolo:c 
                 {: 
                     List<Character> lista = new ArrayList<>(); 
                     lista.add(c); 
                     RESULT = lista;
                 :}
                 | lista_simbolos:lista COMA simbolo:c 
                 {: 
                     lista.add(c); 
                     RESULT = lista;
                 :} ;

simbolo ::= CARACTER:c
          {:
              RESULT = c;
          :}
          | IDENTIFICADOR:id
          {:
              if (id != null && id.length() >= 1) {
                  RESULT = id.charAt(0);
              } else {
                  RESULT = ' ';
              }
          :}
          | DOLAR
          {:
              RESULT = '$';
          :} ;

transiciones_afd ::= grupo_trans_afd:grupo PUNTO_COMA 
                   {: 
                       RESULT = grupo; 
                   :}
                   | transiciones_afd:lista grupo_trans_afd:grupo PUNTO_COMA 
                   {: 
                       lista.addAll(grupo);
                       RESULT = lista; 
                   :} ;

grupo_trans_afd ::= trans_afd_simple:t
                  {: 
                      List<Transicion> lista = new ArrayList<>();
                      if (t != null) {
                          lista.add(t);
                      }
                      RESULT = lista; 
                  :}
                  | grupo_trans_afd:lista OR trans_afd_simple:t
                  {: 
                      if (t != null) {
                          lista.add(t);
                      }
                      RESULT = lista; 
                  :} ;

trans_afd_simple ::= IDENTIFICADOR:origen FLECHA simbolo:s COMA IDENTIFICADOR:destino
                   {: 
                       if (origen != null && s != null && destino != null) {
                           RESULT = new TransicionAFD(origen, s, destino); 
                       } else {
                           RESULT = null;
                       }
                   :} ;

transiciones_ap ::= grupo_trans_ap:grupo PUNTO_COMA 
                  {: 
                      RESULT = grupo; 
                  :}
                  | transiciones_ap:lista grupo_trans_ap:grupo PUNTO_COMA 
                  {: 
                      lista.addAll(grupo);
                      RESULT = lista; 
                  :} ;

grupo_trans_ap ::= trans_ap_simple:t
                 {: 
                     List<Transicion> lista = new ArrayList<>();
                     if (t != null) {
                         lista.add(t);
                     }
                     RESULT = lista; 
                 :}
                 | grupo_trans_ap:lista OR trans_ap_simple:t
                 {: 
                     if (t != null) {
                         lista.add(t);
                     }
                     RESULT = lista; 
                 :} ;

trans_ap_simple ::= IDENTIFICADOR:origen PAREN_IZQ simbolo:entrada PAREN_DER 
                    FLECHA PAREN_IZQ simbolo:extrae PAREN_DER COMA 
                    IDENTIFICADOR:destino DOS_PUNTOS PAREN_IZQ simbolo:inserta PAREN_DER
                  {: 
                      if (origen != null && entrada != null && extrae != null && 
                          destino != null && inserta != null) {
                          RESULT = new TransicionAP(origen, entrada, extrae, destino, inserta); 
                      } else {
                          RESULT = null;
                      }
                  :} ;

llamada_funcion ::= VER_AUTOMATAS PAREN_IZQ PAREN_DER PUNTO_COMA 
                  {: 
                    System.out.println("Salida:");
                    if (parser.automatas.isEmpty()) {
                        System.out.println("No hay automatas definidos.");
                    } else {
                        for (String nombre : parser.automatas.keySet()) {
                            Object automata = parser.automatas.get(nombre);
                            String tipo = (automata instanceof AFD) ? "Autómata Finito Determinista" : "Autómata de Pila";
                            System.out.println(nombre + " " + tipo);
                        }
                    }
                  :}
                  | DESC PAREN_IZQ IDENTIFICADOR:nombre PAREN_DER PUNTO_COMA 
                  {: 
                    Object automata = parser.automatas.get(nombre);
                    if (automata != null) {
                        System.out.println("Salida:");
                        System.out.println("Nombre: " + nombre);
                        
                        if (automata instanceof AFD) {
                            AFD afd = (AFD) automata;
                            System.out.println("Tipo: Autómata Finito Determinista");
                            System.out.println("Estados: " + String.join(", ", afd.getEstados()));
                            
                            StringBuilder alfabeto = new StringBuilder();
                            boolean first = true;
                            for (Character c : afd.getAlfabeto()) {
                                if (!first) alfabeto.append(", ");
                                alfabeto.append(c);
                                first = false;
                            }
                            System.out.println("Alfabeto: " + alfabeto.toString());
                            System.out.println("Estado Inicial: " + afd.getEstadoInicial());
                            System.out.println("Estados de aceptación: " + String.join(", ", afd.getEstadosAceptacion()));
                            
                        } else if (automata instanceof AP) {
                            AP ap = (AP) automata;
                            System.out.println("Tipo: Autómata de Pila");
                            System.out.println("Estados: " + String.join(", ", ap.getEstados()));
                            
                            StringBuilder alfabeto = new StringBuilder();
                            boolean first = true;
                            for (Character c : ap.getAlfabeto()) {
                                if (!first) alfabeto.append(", ");
                                alfabeto.append(c);
                                first = false;
                            }
                            System.out.println("Alfabeto: " + alfabeto.toString());
                            System.out.println("Estado Inicial: " + ap.getEstadoInicial());
                            System.out.println("Estados de aceptación: " + String.join(", ", ap.getEstadosAceptacion()));
                        }
                    } else {
                        System.out.println("Error: Automata '" + nombre + "' no encontrado");
                        parser.mostrarError("Automata '" + nombre + "' no esta definido", -1, -1);
                    }
                  :}
                  | IDENTIFICADOR:nombre PAREN_IZQ CADENA:cadena PAREN_DER PUNTO_COMA 
                  {: 
                    Object automata = parser.automatas.get(nombre);
                    if (automata != null) {
                        boolean valida;
                        try {
                            if (automata instanceof AFD) {
                                valida = ((AFD)automata).validarCadena(cadena);
                            } else {
                                valida = ((AP)automata).validarCadena(cadena);
                            }
                            System.out.println("Salida:");
                            System.out.println(nombre + " " + cadena + " " + (valida ? "Cadena Válida" : "Cadena No Válida"));
                        } catch (Exception e) {
                            System.out.println("Error validando cadena: " + e.getMessage());
                            parser.mostrarError("Error en validacion de cadena", -1, -1);
                        }
                    } else {
                        System.out.println("Error: Automata '" + nombre + "' no encontrado");
                        parser.mostrarError("Automata '" + nombre + "' no esta definido", -1, -1);
                    }
                  :} ;