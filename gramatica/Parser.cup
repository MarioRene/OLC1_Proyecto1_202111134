package analizadores;

import java_cup.runtime.*;
import modelos.*;
import java.util.*;

parser code {:
    public static Map<String, Object> automatas = new HashMap<>();
    public static List<String> errores = new ArrayList<>();
    
    private void mostrarError(String mensaje, int linea, int columna) {
        String error = "Error sintáctico: " + mensaje + " en línea " + (linea + 1) + ", columna " + (columna + 1);
        errores.add(error);
        System.err.println(error);
    }
    
    public void syntax_error(Symbol s) {
        mostrarError("Token inesperado", s.left, s.right);
    }
    
    public void unrecovered_syntax_error(Symbol s) {
        mostrarError("Error de sintaxis irrecuperable", s.left, s.right);
    }
:};

// Terminales
terminal String CADENA, IDENTIFICADOR;
terminal Character CARACTER;
terminal 
    AFD_INI, AFD_FIN, AP_INI, AP_FIN, 
    NOMBRE, N, T, P, I, A, TRANSICIONES,
    VER_AUTOMATAS, DESC,
    IGUAL, LLAVE_IZQ, LLAVE_DER, PAREN_IZQ, PAREN_DER,
    FLECHA, OR, PUNTO_COMA, DOS_PUNTOS, COMA, DOLAR;

// No terminales
non terminal Object programa, elementos, elemento, llamada_funcion;
non terminal AFD definicion_afd;
non terminal AP definicion_ap;
non terminal List<String> lista_estados;
non terminal List<Character> lista_simbolos;
non terminal List<Transicion> transiciones_afd, transiciones_ap;
non terminal Transicion transicion_afd_grupo, transicion_ap_grupo;
non terminal Transicion transicion_afd_simple, transicion_ap_simple;

// Precedencias
precedence left OR;

// Reglas gramaticales
programa ::= elementos;

elementos ::= elementos elemento 
            | elemento 
            | /* vacio */
            ;

elemento ::= definicion_afd 
           | definicion_ap
           | llamada_funcion 
           | error PUNTO_COMA {: mostrarError("Error de sintaxis", -1, -1); :}
           ;

// Definición de AFD
definicion_afd ::= AFD_INI NOMBRE IGUAL CADENA:nombre LLAVE_DER 
                   N IGUAL LLAVE_IZQ lista_estados:estados LLAVE_DER PUNTO_COMA
                   T IGUAL LLAVE_IZQ lista_simbolos:alfabeto LLAVE_DER PUNTO_COMA
                   I IGUAL LLAVE_IZQ IDENTIFICADOR:inicial LLAVE_DER PUNTO_COMA
                   A IGUAL LLAVE_IZQ lista_estados:aceptacion LLAVE_DER PUNTO_COMA
                   TRANSICIONES DOS_PUNTOS transiciones_afd:trans 
                   AFD_FIN 
                 {: 
                   try {
                       AFD nuevoAFD = new AFD(nombre, estados, alfabeto, inicial, aceptacion, trans);
                       automatas.put(nombre, nuevoAFD);
                       RESULT = nuevoAFD;
                       System.out.println("AFD '" + nombre + "' definido correctamente");
                   } catch (Exception e) {
                       mostrarError(e.getMessage(), -1, -1);
                       RESULT = null;
                   }
                 :} ;

// Definición de AP
definicion_ap ::= AP_INI NOMBRE IGUAL CADENA:nombre LLAVE_DER 
                  N IGUAL LLAVE_IZQ lista_estados:estados LLAVE_DER PUNTO_COMA
                  T IGUAL LLAVE_IZQ lista_simbolos:alfabeto LLAVE_DER PUNTO_COMA
                  P IGUAL LLAVE_IZQ lista_simbolos:pila LLAVE_DER PUNTO_COMA
                  I IGUAL LLAVE_IZQ IDENTIFICADOR:inicial LLAVE_DER PUNTO_COMA
                  A IGUAL LLAVE_IZQ lista_estados:aceptacion LLAVE_DER PUNTO_COMA
                  TRANSICIONES DOS_PUNTOS transiciones_ap:trans 
                  AP_FIN 
                {: 
                  try {
                      AP nuevoAP = new AP(nombre, estados, alfabeto, pila, inicial, aceptacion, trans);
                      automatas.put(nombre, nuevoAP);
                      RESULT = nuevoAP;
                      System.out.println("AP '" + nombre + "' definido correctamente");
                  } catch (Exception e) {
                      mostrarError(e.getMessage(), -1, -1);
                      RESULT = null;
                  }
                :} ;

// Listas
lista_estados ::= IDENTIFICADOR:e {: 
                    RESULT = new ArrayList<String>(); 
                    ((List<String>)RESULT).add(e); 
                  :}
                | lista_estados COMA IDENTIFICADOR:e {: 
                    ((List<String>)RESULT).add(e); 
                  :} ;

lista_simbolos ::= CARACTER:c {: 
                     RESULT = new ArrayList<Character>(); 
                     ((List<Character>)RESULT).add(c); 
                   :}
                 | lista_simbolos COMA CARACTER:c {: 
                     ((List<Character>)RESULT).add(c); 
                   :} ;

// Transiciones AFD
transiciones_afd ::= transicion_afd_grupo:t PUNTO_COMA {: 
                       RESULT = new ArrayList<Transicion>(); 
                       ((List<Transicion>)RESULT).add(t); 
                     :}
                   | transiciones_afd transicion_afd_grupo:t PUNTO_COMA {: 
                       ((List<Transicion>)RESULT).add(t); 
                     :} ;

transicion_afd_grupo ::= transicion_afd_simple:t {: RESULT = t; :}
                       | transicion_afd_grupo OR transicion_afd_simple:t {: RESULT = t; :} ;

transicion_afd_simple ::= IDENTIFICADOR:origen FLECHA CARACTER:simbolo COMA IDENTIFICADOR:destino 
                        {: 
                            RESULT = new TransicionAFD(origen, simbolo, destino); 
                        :} ;

// Transiciones AP  
transiciones_ap ::= transicion_ap_grupo:t PUNTO_COMA {: 
                      RESULT = new ArrayList<Transicion>(); 
                      ((List<Transicion>)RESULT).add(t); 
                    :}
                  | transiciones_ap transicion_ap_grupo:t PUNTO_COMA {: 
                      ((List<Transicion>)RESULT).add(t); 
                    :} ;

transicion_ap_grupo ::= transicion_ap_simple:t {: RESULT = t; :}
                      | transicion_ap_grupo OR transicion_ap_simple:t {: RESULT = t; :} ;

transicion_ap_simple ::= IDENTIFICADOR:origen PAREN_IZQ CARACTER:entrada PAREN_DER 
                         FLECHA PAREN_IZQ CARACTER:extrae PAREN_DER COMA 
                         IDENTIFICADOR:destino DOS_PUNTOS PAREN_IZQ CARACTER:inserta PAREN_DER
                       {: 
                           RESULT = new TransicionAP(origen, entrada, extrae, destino, inserta); 
                       :} ;

// Llamadas a funciones
llamada_funcion ::= VER_AUTOMATAS PAREN_IZQ PAREN_DER PUNTO_COMA 
                  {: 
                    System.out.println("=== LISTA DE AUTÓMATAS ===");
                    for (String nombre : automatas.keySet()) {
                        Object automata = automatas.get(nombre);
                        String tipo = (automata instanceof AFD) ? "Autómata Finito Determinista" : "Autómata de Pila";
                        System.out.println(nombre + " - " + tipo);
                    }
                    System.out.println("==========================");
                  :}
                  | DESC PAREN_IZQ IDENTIFICADOR:nombre PAREN_DER PUNTO_COMA 
                  {: 
                    Object automata = automatas.get(nombre);
                    if (automata != null) {
                        System.out.println("=== DESCRIPCIÓN DE " + nombre + " ===");
                        if (automata instanceof AFD) {
                            ((AFD)automata).descripcion();
                        } else if (automata instanceof AP) {
                            ((AP)automata).descripcion();
                        }
                        System.out.println("==============================");
                    } else {
                        System.out.println("Error: Autómata '" + nombre + "' no encontrado");
                    }
                  :}
                  | IDENTIFICADOR:nombre PAREN_IZQ CADENA:cadena PAREN_DER PUNTO_COMA 
                  {: 
                    Object automata = automatas.get(nombre);
                    if (automata != null) {
                        boolean valida;
                        if (automata instanceof AFD) {
                            valida = ((AFD)automata).validarCadena(cadena);
                        } else {
                            valida = ((AP)automata).validarCadena(cadena);
                        }
                        System.out.println("Validación: " + nombre + "('" + cadena + "') = " + 
                                         (valida ? "VÁLIDA" : "NO VÁLIDA"));
                    } else {
                        System.out.println("Error: Autómata '" + nombre + "' no encontrado");
                    }
                  :} ;