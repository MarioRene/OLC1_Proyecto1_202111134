
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import modelos.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\003\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\005\043\000\002\006\051\000\002\010\003\000\002" +
    "\010\005\000\002\011\003\000\002\011\005\000\002\012" +
    "\004\000\002\012\005\000\002\014\003\000\002\014\005" +
    "\000\002\016\007\000\002\013\004\000\002\013\005\000" +
    "\002\015\003\000\002\015\005\000\002\017\020\000\002" +
    "\007\006\000\002\007\007\000\002\007\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\020\002\uffff\003\014\005\017\007\011\011" +
    "\013\022\016\023\007\001\002\000\004\002\212\001\002" +
    "\000\020\002\ufffd\003\ufffd\005\ufffd\007\ufffd\011\ufffd\022" +
    "\ufffd\023\ufffd\001\002\000\020\002\ufffc\003\ufffc\005\ufffc" +
    "\007\ufffc\011\ufffc\022\ufffc\023\ufffc\001\002\000\004\027" +
    "\206\001\002\000\020\002\ufffb\003\ufffb\005\ufffb\007\ufffb" +
    "\011\ufffb\022\ufffb\023\ufffb\001\002\000\004\013\132\001" +
    "\002\000\020\002\000\003\014\005\017\007\011\011\013" +
    "\022\016\023\007\001\002\000\004\013\030\001\002\000" +
    "\004\033\027\001\002\000\020\002\ufffa\003\ufffa\005\ufffa" +
    "\007\ufffa\011\ufffa\022\ufffa\023\ufffa\001\002\000\004\027" +
    "\024\001\002\000\004\027\020\001\002\000\004\004\021" +
    "\001\002\000\004\030\022\001\002\000\004\033\023\001" +
    "\002\000\020\002\uffe6\003\uffe6\005\uffe6\007\uffe6\011\uffe6" +
    "\022\uffe6\023\uffe6\001\002\000\004\030\025\001\002\000" +
    "\004\033\026\001\002\000\020\002\uffe8\003\uffe8\005\uffe8" +
    "\007\uffe8\011\uffe8\022\uffe8\023\uffe8\001\002\000\020\002" +
    "\ufff9\003\ufff9\005\ufff9\007\ufff9\011\ufff9\022\ufff9\023\ufff9" +
    "\001\002\000\004\024\031\001\002\000\004\004\032\001" +
    "\002\000\004\026\033\001\002\000\004\014\034\001\002" +
    "\000\004\024\035\001\002\000\004\025\036\001\002\000" +
    "\004\005\040\001\002\000\006\026\042\035\041\001\002" +
    "\000\006\026\ufff6\035\ufff6\001\002\000\004\005\130\001" +
    "\002\000\004\033\043\001\002\000\004\015\044\001\002" +
    "\000\004\024\045\001\002\000\004\025\046\001\002\000" +
    "\004\006\047\001\002\000\006\026\ufff4\035\ufff4\001\002" +
    "\000\006\026\052\035\051\001\002\000\004\006\127\001" +
    "\002\000\004\033\053\001\002\000\004\016\054\001\002" +
    "\000\004\024\055\001\002\000\004\025\056\001\002\000" +
    "\004\006\047\001\002\000\006\026\060\035\051\001\002" +
    "\000\004\033\061\001\002\000\004\017\062\001\002\000" +
    "\004\024\063\001\002\000\004\025\064\001\002\000\004" +
    "\005\065\001\002\000\004\026\066\001\002\000\004\033" +
    "\067\001\002\000\004\020\070\001\002\000\004\024\071" +
    "\001\002\000\004\025\072\001\002\000\004\005\040\001" +
    "\002\000\006\026\074\035\041\001\002\000\004\033\075" +
    "\001\002\000\004\021\076\001\002\000\004\034\077\001" +
    "\002\000\004\005\102\001\002\000\006\032\uffeb\033\uffeb" +
    "\001\002\000\006\032\107\033\126\001\002\000\004\027" +
    "\111\001\002\000\006\005\102\012\105\001\002\000\006" +
    "\032\107\033\106\001\002\000\020\002\ufff7\003\ufff7\005" +
    "\ufff7\007\ufff7\011\ufff7\022\ufff7\023\ufff7\001\002\000\006" +
    "\005\uffec\012\uffec\001\002\000\004\005\102\001\002\000" +
    "\006\032\uffea\033\uffea\001\002\000\004\006\112\001\002" +
    "\000\004\030\113\001\002\000\004\031\114\001\002\000" +
    "\004\027\115\001\002\000\004\006\116\001\002\000\004" +
    "\030\117\001\002\000\004\035\120\001\002\000\004\005" +
    "\121\001\002\000\004\034\122\001\002\000\004\027\123" +
    "\001\002\000\004\006\124\001\002\000\004\030\125\001" +
    "\002\000\006\032\uffe9\033\uffe9\001\002\000\006\005\uffed" +
    "\012\uffed\001\002\000\006\026\ufff3\035\ufff3\001\002\000" +
    "\006\026\ufff5\035\ufff5\001\002\000\020\002\ufffe\003\ufffe" +
    "\005\ufffe\007\ufffe\011\ufffe\022\ufffe\023\ufffe\001\002\000" +
    "\004\024\133\001\002\000\004\004\134\001\002\000\004" +
    "\026\135\001\002\000\004\014\136\001\002\000\004\024" +
    "\137\001\002\000\004\025\140\001\002\000\004\005\040" +
    "\001\002\000\006\026\142\035\041\001\002\000\004\033" +
    "\143\001\002\000\004\015\144\001\002\000\004\024\145" +
    "\001\002\000\004\025\146\001\002\000\004\006\047\001" +
    "\002\000\006\026\150\035\051\001\002\000\004\033\151" +
    "\001\002\000\004\017\152\001\002\000\004\024\153\001" +
    "\002\000\004\025\154\001\002\000\004\005\155\001\002" +
    "\000\004\026\156\001\002\000\004\033\157\001\002\000" +
    "\004\020\160\001\002\000\004\024\161\001\002\000\004" +
    "\025\162\001\002\000\004\005\040\001\002\000\006\026" +
    "\164\035\041\001\002\000\004\033\165\001\002\000\004" +
    "\021\166\001\002\000\004\034\167\001\002\000\004\005" +
    "\171\001\002\000\006\005\171\010\203\001\002\000\004" +
    "\031\177\001\002\000\006\032\175\033\174\001\002\000" +
    "\006\032\ufff0\033\ufff0\001\002\000\006\005\ufff2\010\ufff2" +
    "\001\002\000\004\005\171\001\002\000\006\032\uffef\033" +
    "\uffef\001\002\000\004\006\200\001\002\000\004\035\201" +
    "\001\002\000\004\005\202\001\002\000\006\032\uffee\033" +
    "\uffee\001\002\000\020\002\ufff8\003\ufff8\005\ufff8\007\ufff8" +
    "\011\ufff8\022\ufff8\023\ufff8\001\002\000\006\032\175\033" +
    "\205\001\002\000\006\005\ufff1\010\ufff1\001\002\000\004" +
    "\005\207\001\002\000\004\030\210\001\002\000\004\033" +
    "\211\001\002\000\020\002\uffe7\003\uffe7\005\uffe7\007\uffe7" +
    "\011\uffe7\022\uffe7\023\uffe7\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\016\002\003\003\011\004\004\005\005\006" +
    "\007\007\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\130\005\005\006\007\007\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\102\015\100\017\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\103\017\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\167\014\171\016\172" +
    "\001\001\000\006\014\203\016\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Map<String, Object> automatas = new HashMap<>();
    public static List<String> errores = new ArrayList<>();
    
    private void mostrarError(String mensaje, int linea, int columna) {
        String error = "Error sintáctico: " + mensaje;
        if (linea >= 0 && columna >= 0) {
            error += " en línea " + (linea + 1) + ", columna " + (columna + 1);
        }
        errores.add(error);
        System.err.println(error);
    }
    
    public void syntax_error(Symbol s) {
        String tokenName = "desconocido";
        if (s.value != null) {
            tokenName = s.value.toString();
        }
        mostrarError("Token inesperado '" + tokenName + "'", s.left, s.right);
    }
    
    public void unrecovered_syntax_error(Symbol s) throws Exception {
        mostrarError("Error de sintaxis irrecuperable", s.left, s.right);
        throw new Exception("Error de sintaxis irrecuperable");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= elementos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // elementos ::= elementos elemento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // elementos ::= elemento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // elemento ::= definicion_afd 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // elemento ::= definicion_ap 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // elemento ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // elemento ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		 parser.mostrarError("Error de sintaxis en elemento", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // definicion_afd ::= AFD_INI NOMBRE IGUAL CADENA LLAVE_DER N IGUAL LLAVE_IZQ lista_estados LLAVE_DER PUNTO_COMA T IGUAL LLAVE_IZQ lista_simbolos LLAVE_DER PUNTO_COMA I IGUAL LLAVE_IZQ IDENTIFICADOR LLAVE_DER PUNTO_COMA A IGUAL LLAVE_IZQ lista_estados LLAVE_DER PUNTO_COMA TRANSICIONES DOS_PUNTOS transiciones_afd AFD_FIN 
            {
              AFD RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-29)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-29)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-29)).value;
		int estadosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).left;
		int estadosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).right;
		List<String> estados = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-24)).value;
		int alfabetoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)).left;
		int alfabetoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)).right;
		List<Character> alfabeto = (List<Character>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-18)).value;
		int inicialleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int inicialright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String inicial = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int aceptacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aceptacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<String> aceptacion = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int transleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int transright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Transicion> trans = (List<Transicion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                   try {
                       AFD nuevoAFD = new AFD(nombre, estados, alfabeto, inicial, aceptacion, trans);
                       parser.automatas.put(nombre, nuevoAFD);
                       RESULT = nuevoAFD;
                       System.out.println("AFD '" + nombre + "' definido correctamente");
                   } catch (Exception e) {
                       parser.mostrarError("Error en AFD '" + nombre + "': " + e.getMessage(), -1, -1);
                       RESULT = null;
                   }
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definicion_afd",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-32)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // definicion_ap ::= AP_INI NOMBRE IGUAL CADENA LLAVE_DER N IGUAL LLAVE_IZQ lista_estados LLAVE_DER PUNTO_COMA T IGUAL LLAVE_IZQ lista_simbolos LLAVE_DER PUNTO_COMA P IGUAL LLAVE_IZQ lista_simbolos LLAVE_DER PUNTO_COMA I IGUAL LLAVE_IZQ IDENTIFICADOR LLAVE_DER PUNTO_COMA A IGUAL LLAVE_IZQ lista_estados LLAVE_DER PUNTO_COMA TRANSICIONES DOS_PUNTOS transiciones_ap AP_FIN 
            {
              AP RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-35)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-35)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-35)).value;
		int estadosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-30)).left;
		int estadosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-30)).right;
		List<String> estados = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-30)).value;
		int alfabetoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).left;
		int alfabetoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).right;
		List<Character> alfabeto = (List<Character>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-24)).value;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)).right;
		List<Character> pila = (List<Character>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-18)).value;
		int inicialleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int inicialright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String inicial = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int aceptacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aceptacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<String> aceptacion = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int transleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int transright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Transicion> trans = (List<Transicion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  try {
                      AP nuevoAP = new AP(nombre, estados, alfabeto, pila, inicial, aceptacion, trans);
                      parser.automatas.put(nombre, nuevoAP);
                      RESULT = nuevoAP;
                      System.out.println("AP '" + nombre + "' definido correctamente");
                  } catch (Exception e) {
                      parser.mostrarError("Error en AP '" + nombre + "': " + e.getMessage(), -1, -1);
                      RESULT = null;
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definicion_ap",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-38)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_estados ::= IDENTIFICADOR 
            {
              List<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                    List<String> lista = new ArrayList<>(); 
                    lista.add(e); 
                    RESULT = lista;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_estados",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_estados ::= lista_estados COMA IDENTIFICADOR 
            {
              List<String> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> lista = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                    lista.add(e); 
                    RESULT = lista;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_estados",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_simbolos ::= CARACTER 
            {
              List<Character> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                     List<Character> lista = new ArrayList<>(); 
                     lista.add(c); 
                     RESULT = lista;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_simbolos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_simbolos ::= lista_simbolos COMA CARACTER 
            {
              List<Character> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Character> lista = (List<Character>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                     lista.add(c); 
                     RESULT = lista;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_simbolos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // transiciones_afd ::= grupo_trans_afd PUNTO_COMA 
            {
              List<Transicion> RESULT =null;
		int grupoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gruporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Transicion> grupo = (List<Transicion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                       RESULT = grupo; 
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("transiciones_afd",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // transiciones_afd ::= transiciones_afd grupo_trans_afd PUNTO_COMA 
            {
              List<Transicion> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Transicion> lista = (List<Transicion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int grupoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gruporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Transicion> grupo = (List<Transicion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                       lista.addAll(grupo);
                       RESULT = lista; 
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("transiciones_afd",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // grupo_trans_afd ::= trans_afd_simple 
            {
              List<Transicion> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Transicion t = (Transicion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                      List<Transicion> lista = new ArrayList<>();
                      lista.add(t);
                      RESULT = lista; 
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grupo_trans_afd",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // grupo_trans_afd ::= grupo_trans_afd OR trans_afd_simple 
            {
              List<Transicion> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Transicion> lista = (List<Transicion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Transicion t = (Transicion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                      lista.add(t);
                      RESULT = lista; 
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grupo_trans_afd",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // trans_afd_simple ::= IDENTIFICADOR FLECHA CARACTER COMA IDENTIFICADOR 
            {
              Transicion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String origen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int simbololeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int simboloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Character simbolo = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String destino = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                       RESULT = new TransicionAFD(origen, simbolo, destino); 
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trans_afd_simple",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // transiciones_ap ::= grupo_trans_ap PUNTO_COMA 
            {
              List<Transicion> RESULT =null;
		int grupoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gruporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Transicion> grupo = (List<Transicion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                      RESULT = grupo; 
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("transiciones_ap",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // transiciones_ap ::= transiciones_ap grupo_trans_ap PUNTO_COMA 
            {
              List<Transicion> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Transicion> lista = (List<Transicion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int grupoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gruporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Transicion> grupo = (List<Transicion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                      lista.addAll(grupo);
                      RESULT = lista; 
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("transiciones_ap",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // grupo_trans_ap ::= trans_ap_simple 
            {
              List<Transicion> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Transicion t = (Transicion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                     List<Transicion> lista = new ArrayList<>();
                     lista.add(t);
                     RESULT = lista; 
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grupo_trans_ap",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // grupo_trans_ap ::= grupo_trans_ap OR trans_ap_simple 
            {
              List<Transicion> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Transicion> lista = (List<Transicion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Transicion t = (Transicion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                     lista.add(t);
                     RESULT = lista; 
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grupo_trans_ap",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // trans_ap_simple ::= IDENTIFICADOR PAREN_IZQ CARACTER PAREN_DER FLECHA PAREN_IZQ CARACTER PAREN_DER COMA IDENTIFICADOR DOS_PUNTOS PAREN_IZQ CARACTER PAREN_DER 
            {
              Transicion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String origen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int entradaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int entradaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Character entrada = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int extraeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int extraeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Character extrae = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String destino = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int insertaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insertaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Character inserta = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                      RESULT = new TransicionAP(origen, entrada, extrae, destino, inserta); 
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trans_ap_simple",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // llamada_funcion ::= VER_AUTOMATAS PAREN_IZQ PAREN_DER PUNTO_COMA 
            {
              Object RESULT =null;
		 
                    System.out.println("\n=== LISTA DE AUTOMATAS ===");
                    if (parser.automatas.isEmpty()) {
                        System.out.println("No hay automatas definidos.");
                    } else {
                        int contador = 1;
                        for (String nombre : parser.automatas.keySet()) {
                            Object automata = parser.automatas.get(nombre);
                            String tipo = (automata instanceof AFD) ? "Automata Finito Determinista" : "Automata de Pila";
                            System.out.println(contador++ + ". " + nombre + " - " + tipo);
                        }
                    }
                    System.out.println("==========================\n");
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // llamada_funcion ::= DESC PAREN_IZQ IDENTIFICADOR PAREN_DER PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                    Object automata = parser.automatas.get(nombre);
                    if (automata != null) {
                        System.out.println("\n=== DESCRIPCION DE " + nombre + " ===");
                        if (automata instanceof AFD) {
                            ((AFD)automata).descripcion();
                        } else if (automata instanceof AP) {
                            ((AP)automata).descripcion();
                        }
                        System.out.println("==============================\n");
                    } else {
                        System.out.println("Error: Automata '" + nombre + "' no encontrado");
                        parser.mostrarError("Automata '" + nombre + "' no esta definido", -1, -1);
                    }
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // llamada_funcion ::= IDENTIFICADOR PAREN_IZQ CADENA PAREN_DER PUNTO_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                    Object automata = parser.automatas.get(nombre);
                    if (automata != null) {
                        boolean valida;
                        try {
                            if (automata instanceof AFD) {
                                valida = ((AFD)automata).validarCadena(cadena);
                            } else {
                                valida = ((AP)automata).validarCadena(cadena);
                            }
                            System.out.println("\nValidacion: " + nombre + "(\"" + cadena + "\") = " + 
                                             (valida ? "VALIDA" : "NO VALIDA") + "\n");
                        } catch (Exception e) {
                            System.out.println("Error validando cadena: " + e.getMessage());
                            parser.mostrarError("Error en validacion de cadena", -1, -1);
                        }
                    } else {
                        System.out.println("Error: Automata '" + nombre + "' no encontrado");
                        parser.mostrarError("Automata '" + nombre + "' no esta definido", -1, -1);
                    }
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
